CREATE DATABASE INTERMEDIATE_CONCEPT;
USE INTERMEDIATE_CONCEPT;
-- CREATED AND USING DATABASE - " INTERMEDIATE_CONCEPT "


-- MASTER TABLES : CITY AND DEPT --
-- CREATING CITY TABLE (MASTER TABLE):
CREATE TABLE CITY(
CITY_ID INT PRIMARY KEY,
CITY_NAME VARCHAR(20)
);
-- CREATING DEPT TABLE (MASTER TABLE):
CREATE TABLE DEPT(
DEPT_ID INT PRIMARY KEY,
DEPT_NAME VARCHAR(20)
);

-- TRANSACTION TABLE : EMP_INFO --
-- CREATING EMP_INFO TABLE (TRANSACTION TABLE):
CREATE TABLE EMP_INFO(
SNO INT UNIQUE AUTO_INCREMENT,
EMP_ID VARCHAR(20)  PRIMARY KEY,
EMP_NAME VARCHAR(20) NOT NULL,
AGE INT CHECK(AGE >=15),
NATIONALITY VARCHAR(20) DEFAULT('INDIAN'),
EMP_CITY_ID INT,
EMP_DEPT_ID INT,
FOREIGN KEY(EMP_CITY_ID) REFERENCES CITY(CITY_ID),
FOREIGN KEY(EMP_DEPT_ID) REFERENCES DEPT(DEPT_ID)
);


-- INSERTING DATA TO MASTER TABLES :
-- INSERTING DATA TO CITY TABLE (MASTER)
INSERT INTO CITY(CITY_ID,CITY_NAME) VALUES
(1,'CHENNAI'),(2,'BANGALORE'),(3,'HYDERBAD'),(4,'PUNE'),(5,'MUMBAI'),(6,'KOLKATA'),(7,'DELHI');

-- INSERTING DATA TO DEPT TABLE (MASTER)
INSERT INTO DEPT(DEPT_ID , DEPT_NAME) VALUES
(1,'WEB_DESIGNER'),(2,'FRONT-END_DEVELOPER'),(3,'BACK-END_DEVELOPER'),(4,'SQL_DEVELOPER'),(5,'DEVOPS_DEVELOPER'),(6,'FULL-STACK_DEVELOPER');

-- INSERTING DATA TO EMP_INFO TABLE (TRANSACTION)
INSERT INTO EMP_INFO(EMP_ID,EMP_NAME,AGE,EMP_CITY_ID,EMP_DEPT_ID) VALUES
('E0000001','ASHURA',20,1,6),
('E0000002','INDRA',22,1,5),
('E0000003','MADARA',30,3,4),
('E0000004','HASURAMA SENJU',28,3,2),
('E0000005','KAKASHI',25,7,4),
('E0000006','OBITO',24,7,5),
('E0000007','ITACHI',22,6,6),
('E0000008','MIGHT GUY',25,6,2),
('E0000009','GARA',19,3,2),
('E0000010','KONOHAMARU',15,3,1),
('E0000011','NEJI',18,3,3),
('E0000012','ROCK LEE',18,3,4),
('E0000013','NARUTO',18,3,5),
('E0000014','HINATA',18,3,6),
('E0000015','RIN',24,7,6),
('E0000016','SASUKE',18,4,5),
('E0000017','SAKURA',18,4,6),
('E0000018','JIRAIYA',38,2,6),
('E0000019','ORACHIMARU',37,2,5),
('E0000020','TSUNADE',37,2,4),
('E0000021','YAHIKO',27,5,6),
('E0000022','NAGATO',26,5,5),
('E0000023','KONAN',26,5,4);
-- _____________________________________________________

-- FETCHING TABLES BY " SELECT " COMMAND :
SELECT * FROM EMP_INFO;
SELECT * FROM CITY;
SELECT * FROM DEPT;

-- _____________________________________________________
-- ^^^^^^^^^^^^^^^^^^ TABLES CREATED ^^^^^^^^^^^^^^^^ --
CREATE TABLE ANO_DEPT(
DEPT_ID INT PRIMARY KEY,
DEPT_NAME VARCHAR(20)
);
INSERT INTO ANO_DEPT(DEPT_ID, DEPT_NAME) VALUES(1,'SQL DEVELOPER'),(2,'FRONT-END DEVELOPER'),(3,'BACK-END DEVELOPER');

CREATE TABLE EMP(
EMP_ID INT PRIMARY KEY,
EMP_NAME VARCHAR(20),
DEPT_ID INT,
SALARY INT,
FOREIGN KEY(DEPT_ID) REFERENCES ANO_DEPT(DEPT_ID)
);

UPDATE ANO_DEPT SET DEPT_ID = 1003 WHERE DEPT_ID=3
DROP TABLE EMP
INSERT INTO EMP(EMP_ID, EMP_NAME, DEPT_ID, SALARY) VALUES
(1,'MADARA',1001,20000),(2,'OBITO',1002,18000),(3,'ITACHI',1003,19000),(4,'SHISUE',1002,18000),(5,'INDRA',1003,25000),
(6,'JERAIYA',1001,40000),(7,'KAKASHI',1002,25000),(8,'MIGHT GUY',1002,25000),(9,'NEJI',1003,22000),(10,'ROCK LEE',1003,22000)
SELECT * FROM EMP;
SELECT * FROM ANO_DEPT;
-- ------------------------------
CREATE TABLE MOB_SALES(
BRAND_ID INT,
BRAND_NAME VARCHAR(20),
BRAND_MODEL VARCHAR(20),
COST INT
);
INSERT INTO MOB_SALES(BRAND_ID,BRAND_NAME,BRAND_MODEL,COST) VALUES(1,"APPLE","13+",20000),(1,"APPLE","13PRO",25000),(1,"APPLE","14+",30000),
(2,"REALME","X",13000),(2,"REALME","6PRO",12000),(2,"REALME","7PRO",18000),(3,"REDMI","8+",16000),(3,"REDMI","8PRO",17500),(3,"REDMI","9PRO",18500);
SELECT * FROM MOB_SALES;
-- _____________________________________________________

-- 1) GROUP BY AND HAVING CLAUSE :
SELECT B.CITY_NAME, COUNT(*) AS 'TOTAL_EMP'
FROM EMP_INFO A
INNER JOIN CITY B ON A.EMP_CITY_ID = B.CITY_ID
INNER JOIN DEPT C ON A.EMP_DEPT_ID = C.DEPT_ID 
GROUP BY B.CITY_NAME
HAVING TOTAL_EMP =  (SELECT MAX(TOTAL_EMP) FROM 
(SELECT B.CITY_NAME, COUNT(*) AS 'TOTAL_EMP'
FROM EMP_INFO A
INNER JOIN CITY B ON A.EMP_CITY_ID = B.CITY_ID
INNER JOIN DEPT C ON A.EMP_DEPT_ID = C.DEPT_ID 
GROUP BY B.CITY_NAME)A);

-- _____________________________________________________

-- 2) CTE / WITH CLAUSE & SUBQUERIES :

--  FETCH EMPLOYEES WHO EARN MORE THAN AVERAGE SALARY ?

-- 1ST SOLVING BY SUBQUERY :
SELECT ROUND(AVG(SALARY))AS AVG_SALARY FROM EMP; -- FINDING AVERAGE SALARY
SELECT *FROM EMP WHERE SALARY > (SELECT ROUND(AVG(SALARY))AS AVG_SALARY FROM EMP); -- SALARY ABOVE AVERAGE SALARY

-- AND SOLVING BY CTE :
WITH CTE_AVG_SALARY(AVG_SALARY) AS
(SELECT ROUND(AVG(SALARY))AS AVG_SALARY FROM EMP)
SELECT * FROM EMP,CTE_AVG_SALARY
 WHERE EMP.SALARY > CTE_AVG_SALARY.AVG_SALARY;
 -- -----------------------------------------------
 
 -- FIND BRANDS WHO IS SALES WHERE BETTER THAN AVERAGE SALARY ACROSS ALL BRANDS ?
 
 -- 1ST SOLVING BY SUBQUERY :
 SELECT * FROM MOB_SALES;
 
 SELECT BRAND_ID,BRAND_NAME, SUM(COST) AS TOTAL_COST FROM MOB_SALES GROUP BY BRAND_ID; -- TOTAL COST OF ALL BRANDS
 
 SELECT ROUND(AVG(TOTAL_COST)) AS AVG_COST FROM
 (SELECT BRAND_ID,BRAND_NAME, SUM(COST) AS TOTAL_COST FROM MOB_SALES GROUP BY BRAND_ID)X -- AVERAGE COST OF ALL BRANDS
 
SELECT BRAND_ID,BRAND_NAME, SUM(COST) AS TOTAL_COST FROM MOB_SALES GROUP BY BRAND_ID
HAVING TOTAL_COST > (SELECT ROUND(AVG(TOTAL_COST)) AS AVG_COST FROM
 (SELECT BRAND_ID,BRAND_NAME, SUM(COST) AS TOTAL_COST FROM MOB_SALES GROUP BY BRAND_ID)X) -- BRAND THAT BETTER THAN AVG COST
 -- ---------------------
 -- AND SOLVING BY CTE :
 WITH TOTAL_SALES (BRAND_ID,BRAND_NAME, TOTAL_COST) AS
	(SELECT BRAND_ID,BRAND_NAME, SUM(COST) AS TOTAL_COST FROM MOB_SALES GROUP BY BRAND_ID),
		AVG_SALES(AVG_COST) AS
		(SELECT ROUND(AVG(TOTAL_COST)) AS AVG_COST FROM TOTAL_SALES)
SELECT TS.* FROM TOTAL_SALES TS
JOIN AVG_SALES AVS
WHERE TS.TOTAL_COST > AVS.AVG_COST
-- _____________________________________________________
 